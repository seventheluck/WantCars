apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'wantcars'
//version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/gradle.plugin.fi.evident.gradle.beanstalk/gradle-beanstalk-plugin
    //compile group: 'gradle.plugin.fi.evident.gradle.beanstalk', name: 'gradle-beanstalk-plugin', version: '0.2.1'

    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0")
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
    testCompile group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.3.2'
    compile("org.springframework.boot:spring-boot-starter-web")
    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '2.0.3.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.3.RELEASE'

    // Use MySQL Connector-J
    compile 'mysql:mysql-connector-java'
    //compile("org.springframework.boot:spring-boot-starter-security")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    //testCompile("org.springframework.security:spring-security-test")
    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'
    compile group: 'io.sgr', name: 's2-geometry-library-java', version: '1.0.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    // https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter
    compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '1.3.3'

}


buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.fi.evident.gradle.beanstalk:gradle-beanstalk-plugin:0.2.1"
    }
}

apply plugin: "fi.evident.beanstalk"

// beanstalk requires unique version number for each uploaded archive
// SNAPSHOT will be replaced with 'yyyyMMdd.HHmms' label
version = '0.5-SNAPSHOT'

//shadowJar {
//    archiveName = 'wantcars.jar'
//}

//task war(type: War) {
//    archiveName "wantcars.staging.war"
//}
//
//task productionWar(type: War) {
//    archiveName "wantcars.production.war"
//}

beanstalk {
    profile = 'my-profile' // Only required if using .aws/credentials
    s3Endpoint = "s3.us-west-2.amazonaws.com"
    beanstalkEndpoint = "elasticbeanstalk.us-west-2.amazonaws.com"

    deployments {
        // Example to deploy to the same env
        staging {
            file = tasks.jar
            application = 'my-first-webapp-beanstalk'
            environment = "wantcars-${project.version.replaceAll('\\.', '-')}"

        }
        // Example to create a new env for each version (to use URL swapping for blue/green deployment)
        production {
            file = tasks.jar
            application = 'my-first-webapp-beanstalk'
            environment = "wantcars-${project.version.replaceAll('\\.', '-')}"
            //environment = "wantcars"
            template = 'default' // Saved configuration name to use to create each env
        }
    }
}